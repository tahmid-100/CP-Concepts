Factorial Program---

int fact(int n){
    int res;
   if(n==0) return 1;--->base case

   res=n*fact(n-1);  ---->calculation

  return res;        ----->return

 }
int main() {
    optimize();

  int n;

  cin>>n;

  cout<<fact(n)<<endl;

}



Nth Fibonacci Number:                                                 f(3)
sum->   0,1,1,2,3,5,8,13,.....                              f(2)                f(1)
index-> 0,1,2,3,4,5,6,7....                               
                                                      f(1)     f(0)               1
                                                        1        0
f(n-1)+f(n-2)-->calculation

base case f(0),f(1)

int fib(int n){
    int res;
   if(n<=1) return n;

   res=fib(n-1)+fib(n-2);

  return res;

 }

int main() {
    optimize();
  int n;

  cin>>n;

  cout<<fib(n)<<endl;

}

in recursion same fuction is called multiple times ,to solve this we use memoization/dynamic programming...

int dp[100005];                                                                                           

int mark[100005];                                                                                        
                                                                                                    
 int fib(int n){                                                                           
    int res;
   if(n<=1) return n;

   if(dp[n]!=-1) return dp[n];

   res=fib(n-1)+fib(n-2);

   dp[n]=res;

  return res;

 }
int main() {
    optimize();
  memset(dp,-1,sizeof(dp));
  int n;

  cin>>n;

  cout<<fib(n)<<endl;

}

slight improvement-------

int dp[100005];

 int fib(int n){
    int res;
   if(n<=1) return n;---->base case

   if(mark[n]==1) return dp[n]; ----->memoization/dp condition

   res=fib(n-1)+fib(n-2);---->calculation

   dp[n]=res;---
                |--assigning in memory
   mark[n]=1;--- 

  return res;

 }

int main() {
    optimize();

  int n;

  cin>>n;

  cout<<fib(n)<<endl;

}







problem statement:a^b

2^10->(2^5)^2  if b even 
2^9->2*(2*8)  if b odd

 int power(int a,int b){

   if(b==0) return 1;

   if(b%2==0){
    int  res=power(a,b/2);
          return res*res;
   }

   else {
        int res;
      res=a*power(a,b-1);
   return res;
   }


 }
int main() {
    optimize();

  int a,b;

  cin>>a>>b;

  cout<<power(a,b)<<endl;

}

squrt root--->leetcode sqrt

int square_root(int x){

    int low=1;int high=x;
    int ans;

    while(low<=high){

            int mid=(low+high)/2;

        if((mid*mid)<=x){
                 ans=mid;
            low=mid+1;

        }

        else high=mid-1;
    }


    return ans;

}



Dynamic Programming--------

is it possible to make 117 by summing 5,12,23?
                                                                                  117
                                                                   117-5=112   117-12=105   117-23=94    
                                                112-5=107    112-12=100   112-23=89


is it possible to make 112?,if possible then we add 112+5=117 and recursively call it ...if not we check other option...if 
no option is taken then it is impossible.

 vector<int>coins={5,12,23};

 int dp[100005];

 int isPossible(int n){

   if(n<0) return 0;

   if(n==0) return 1;
    if(dp[n]!=-1)  return dp[n];
   int res=0;
  for(int coin:coins){
        if(isPossible(n-coin)){
            res=1;
            break;
        }

  }
  dp[n]=res;

  return res;

 }
int main() {
    optimize();

 memset(dp,-1,sizeof(dp));
  int n;

  cin>>n;

  cout<<isPossible(n)<<endl;

}

