#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'

const int MX = 2e5 + 123;
//ll arr[MX];


 main() {
    optimize();


int n=7;
int w=4;

int arr[n]={5,4,1,3,7,9,2};

  for(int i=0;i<=n-w;i++){  //i=1,2...(n-w)
        int mn=INT_MAX;
             int mx=INT_MIN;

    for(int j=i;j<i+w;j++){ //i,i+1,i+2,...i+w

         mx=max(mx,arr[j]);

         mn=min(mn,arr[j]);

    }
    cout<<mn<<" "<<mx<<endl;
  }
}//n square 



// FIXED SIZE WINDOW
//complexity o(nlogn)

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'

const int MX = 2e5 + 123;
//ll arr[MX];


 main() {
    optimize();

  multiset<int>ms;

  int n=7;

  vector<int>x={5,4,1,3,7,9,2};
  int k=4;
  for(int i=0;i<k;i++){

    ms.insert(x[i]); // 1st window
  }

  for(int i=0;i<=n-k;i++){  //last k elements are not needed in loop

    int mn=*ms.begin();// min element
    int mx=*ms.rbegin(); //max element

    cout<<mn<<" "<<mx<<endl;

    ms.erase(ms.find(x[i])); // ith element is removed

    if(i+k<=n){
        ms.insert(x[i+k]); // i+k element is inserted
    }
  }
}


//maximum length of a subarray with all unique elements

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

#define optimize() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'

 main() {
    optimize();

    int n;

    cin>>n;

    vector<int>x(n+1);

    for(int i=1;i<=n;i++){

        cin>>x[i];
    }

    deque<int>dq;
    map<int,int>mp;

    vector<int>ans;

    for(int i=1;i<=n;i++){

        if(mp[x[i]]==1){

            while(1){

                int v=dq.front();
                dq.pop_front();
                mp[v]=0;

                if(v==x[i]) break;
            }
        }

        dq.push_back(x[i]);

        mp[x[i]]=1;

        ans.push_back(dq.size());

    }


    cout<<*(max_element(ans.begin(),ans.end()))<<endl;



}

/*

9
1 2 1 4 3 2 4 2 5

 */

 time complexity:ðŸ”¹ Total Time = O(n) (with unordered_map o(1))
ðŸ”¹ O(n log n) (if using map)

Even though the while loop is inside the for loop, the total number of iterations of the while loop across all n iterations is at most n, not n times for each i.

Thatâ€™s why the total time complexity is O(n), not O(nÂ²).

tc=O(n)+O(n log n)(map)=O(nlogn)